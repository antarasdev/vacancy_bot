import asyncio

from aiogram import types, Router, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardRemove

from vacancy_bot.my_bot.constants import THREAD_KEYWORDS, RULES_TEXT, EXAMPLE
from vacancy_bot.my_bot.config import config
from vacancy_bot.my_bot.keyboards import main_keyboard
from vacancy_bot.bot import bot


router = Router()

last_vacancy_sent = 0


class VacancyForm(StatesGroup):
    ConfirmVacancy = State()


@router.message(Command("start"))
async def start(message: types.Message):
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏"
    await message.answer(text, reply_markup=main_keyboard())


@router.message(lambda message: message.text == 'üìë –®–∞–±–ª–æ–Ω\n–≤–∞–∫–∞–Ω—Å–∏–∏')
async def send_vacancy_example(message: types.Message):
    text = EXAMPLE
    await message.answer(text)


@router.message(lambda message: message.text == 'üìî –ü—Ä–∞–≤–∏–ª–∞\n–ø—É–±–ª–∏–∫–∞—Ü–∏–∏')
async def send_rules(message: types.Message):
    text = RULES_TEXT
    await message.answer(text)


@router.message(lambda message: message.text == '‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é')
async def publish_vacancy(message: types.Message, state: FSMContext):
    text = '–ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —à–∞–±–ª–æ–Ω—É'
    await message.answer(text)
    await state.set_state(VacancyForm.ConfirmVacancy)


@router.message(VacancyForm.ConfirmVacancy)
async def process_vacancy(message: types.Message, state: FSMContext):
    global last_vacancy_sent
    current_time = asyncio.get_event_loop().time()
    data = message.text
    vacancy_parts = data.split('\n\n')

    hashtags = ([part for part in vacancy_parts if part.startswith("#")])
    name_organisation = [part for part in vacancy_parts if '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏—Ä–º—ã' in part]
    responsibilities = [part for part in vacancy_parts if "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∫–∞–Ω–¥–∏–¥–∞—Ç—É" in part]
    position = next((part for part in vacancy_parts if "–î–æ–ª–∂–Ω–æ—Å—Ç—å" in part), None)
    salary = next((part for part in vacancy_parts if any(word in part.lower() for word in ["–∑–ø", "–æ–∫–ª–∞–¥"])), None)
    contacts = [part for part in vacancy_parts if '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' in part]

    message_thread_id = None
    for thread_id, keywords in THREAD_KEYWORDS.items():
        for keyword in keywords:
            if keyword.lower() in data.lower() or any(
                    keyword.lower() in part.lower() for part in vacancy_parts):
                message_thread_id = thread_id
                break
        if message_thread_id:
            break

    if message_thread_id and responsibilities and salary and position and hashtags and name_organisation and contacts:
        if current_time - last_vacancy_sent < 1800:  # 1800 seconds = 30 minutes
            await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 30 –º–∏–Ω—É—Ç.")
        else:
            formatted_vacancy = (
                "\n\n".join(hashtags + name_organisation +
                            [position] + list(map(str, responsibilities)) +
                            [salary] + contacts)
                )
            await bot.send_message(chat_id=config.chat_id.get_secret_value(),
                                   message_thread_id=message_thread_id, text=formatted_vacancy)
            last_vacancy_sent = current_time
            await state.clear()
            await message.answer("–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞.", reply_markup=main_keyboard())
    else:
        await message.answer(
            "–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.",
            reply_markup=main_keyboard()
        )


@router.message()
async def message_handler(message: types.Message):
    text = "–ß—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚úÖ–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é'"
    await message.answer(text, reply_markup=main_keyboard())
